{"version":3,"sources":["logo.svg","FormSelector/LoginForm/ValidationSchema.js","common/DisplayFormikProps/index.js","common/Input/index.js","FormSelector/LoginForm/index.js","FormSelector/NumberForm/ValidationSchema.js","common/NumberField/index.js","FormSelector/NumberForm/index.js","FormSelector/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ValidationSchema","Yup","shape","email","required","password","DisplayFormikProps","props","react_default","a","createElement","JSON","stringify","Input","_ref","field","_ref$form","form","label","touched","errors","Object","objectWithoutProperties","Fragment","className","htmlFor","name","assign","LoginForm","formik_esm","initialValues","validationSchema","autoCapitalize","autoComplete","type","component","render","msg","common_DisplayFormikProps","amount","min","max","NumberField","value","onValueChange","rest","console","log","number_format_default","thousandSeparator","prefix","NumberForm","common_NumberField","placeholder","values","numbers","decimalScale","val","setFieldValue","floatValue","FormSelector","_React$PureComponent","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isLoginForm","handleSwitchForm","setState","prevState","inherits","createClass","key","onClick","FormSelector_LoginForm","FormSelector_NumberForm","React","PureComponent","App","src","logo","alt","width","height","src_FormSelector","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a1db4d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as Yup from 'yup';\n\nexport const ValidationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Email Required'),\n  password: Yup.string().required('Password Required'),\n});\n\nexport default ValidationSchema;\n","import React from 'react';\n\nexport function DisplayFormikProps(props) {\n  return (\n    <pre>\n      <strong>props</strong> = {JSON.stringify(props, null, 2)}\n    </pre>\n  );\n}\n\nexport default DisplayFormikProps;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\nexport function Input({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  label,\n  ...props\n}) {\n  return (\n    <React.Fragment>\n      {label && (\n        <label className=\"Input--Label\" htmlFor={field.name}>\n          {label}\n        </label>\n      )}\n      <input className=\"Input--Field\" {...field} {...props} />\n    </React.Fragment>\n  );\n}\n\nInput.propTypes = {\n  field: PropTypes.object,\n  form: PropTypes.object,\n  label: PropTypes.string,\n};\n\nexport default Input;\n","/**\n * LoginForm\n */\n\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport ValidationSchema from './ValidationSchema';\nimport '../styles.css';\nimport DisplayFormikProps from '../../common/DisplayFormikProps';\nimport Input from '../../common/Input';\n\nfunction LoginForm() {\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={ValidationSchema}\n    >\n      {props => (\n        <Form autoCapitalize=\"off\" autoComplete=\"off\">\n          <div className=\"Form--Container\">\n            <div>\n              <div className=\"Form--Field\">\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  component={Input}\n                  label=\"Email Address\"\n                />\n              </div>\n              <div className=\"Form--Field\">\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  component={Input}\n                  label=\"Password\"\n                />\n              </div>\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <div className=\"Form--Error\">{msg}</div>}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <div className=\"Form--Error\">{msg}</div>}\n              />\n            </div>\n            <div>\n              <DisplayFormikProps {...props} />\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default LoginForm;\n","import * as Yup from 'yup';\n\nexport const ValidationSchema = Yup.object().shape({\n  amount: Yup.number()\n    .min(1, 'Amount must be greater than 0')\n    .max(100, 'Amount cannot be greater than $100')\n    .required('Amount Required'),\n});\n\nexport default ValidationSchema;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\n\nexport function NumberField(props) {\n  const { value, onValueChange, ...rest } = props;\n\n  console.log(props);\n  return (\n    <NumberFormat\n      value={value}\n      thousandSeparator\n      prefix=\"$\"\n      onValueChange={onValueChange}\n      {...rest}\n    />\n  );\n}\n\nNumberField.propTypes = {\n  value: PropTypes.number.isRequired,\n  onValueChange: PropTypes.func.isRequired,\n};\n\nexport default NumberField;\n","/**\n * NumberForm\n */\n\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport ValidationSchema from './ValidationSchema';\nimport '../styles.css';\nimport DisplayFormikProps from '../../common/DisplayFormikProps';\nimport NumberField from '../../common/NumberField';\n\nfunction NumberForm() {\n  return (\n    <Formik initialValues={{ amount: 0 }} validationSchema={ValidationSchema}>\n      {props => (\n        <Form autoCapitalize=\"off\" autoComplete=\"off\">\n          <div className=\"Form--Container\">\n            <div>\n              <div className=\"Form--Field\">\n                <NumberField\n                  placeholder=\"$50\"\n                  value={props.values.numbers}\n                  name=\"amount\"\n                  decimalScale={2}\n                  onValueChange={val =>\n                    props.setFieldValue('amount', val.floatValue)\n                  }\n                />\n              </div>\n              <div>\n                {props.errors.amount && (\n                  <div className=\"Form--Error\">{props.errors.amount}</div>\n                )}\n              </div>\n            </div>\n            <div>\n              <DisplayFormikProps {...props} />\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default NumberForm;\n","import React from 'react';\nimport LoginForm from './LoginForm';\nimport NumberForm from './NumberForm';\n\nexport class FormSelector extends React.PureComponent {\n  state = {\n    isLoginForm: true,\n  };\n\n  handleSwitchForm = () => {\n    this.setState(prevState => ({\n      isLoginForm: !prevState.isLoginForm,\n    }));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <button onClick={this.handleSwitchForm}>Switch Form</button>\n        </div>\n        <div>{this.state.isLoginForm ? <LoginForm /> : <NumberForm />}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FormSelector;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormSelector from './FormSelector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img\n          src={logo}\n          className=\"App-logo\"\n          alt=\"logo\"\n          width=\"200\"\n          height=\"200\"\n        />\n        <FormSelector />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}