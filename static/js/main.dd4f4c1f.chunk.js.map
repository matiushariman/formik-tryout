{"version":3,"sources":["LoginForm/ValidationSchema.js","Input/index.js","LoginForm/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ValidationSchema","Yup","shape","email","required","password","Input","_ref","field","_ref$form","form","label","touched","errors","props","Object","objectWithoutProperties","react_default","a","createElement","Fragment","className","for","name","assign","LoginForm","formik_esm","initialValues","validationSchema","autoCapitalize","autoComplete","type","component","render","msg","JSON","stringify","App","src","logo","alt","width","height","src_LoginForm","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"gUASeA,EAPiBC,WAAaC,MAAM,CACjDC,MAAOF,WACJE,MAAM,iBACNC,SAAS,kBACZC,SAAUJ,WAAaG,SAAS,uCCenBE,MAlBR,SAAAC,GAKJ,IAJDC,EAICD,EAJDC,MAICC,EAAAF,EAHDG,KACAC,GAECF,EAHOG,QAGPH,EAHgBI,OAGhBN,EAFDI,OACGG,EACFC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,0BACD,OACEU,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACGT,GACCM,EAAAC,EAAAC,cAAA,SAAOE,UAAU,eAAeC,IAAKd,EAAMe,MACxCZ,GAGLM,EAAAC,EAAAC,cAAA,QAAAJ,OAAAS,OAAA,CAAOH,UAAU,gBAAmBb,EAAWM,MCyCtCW,MA/Cf,WACE,OACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,cAAe,CAAExB,MAAO,GAAIE,SAAU,IACtCuB,iBAAkB5B,GAEjB,SAAAc,GAAK,OACJG,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMG,eAAe,MAAMC,aAAa,OACtCb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEH,KAAK,QACLQ,KAAK,QACLC,UAAW1B,EACXK,MAAM,mBAGVM,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEH,KAAK,WACLQ,KAAK,WACLC,UAAW1B,EACXK,MAAM,cAGVM,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEH,KAAK,QACLU,OAAQ,SAAAC,GAAG,OAAIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAoBa,MAEpDjB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEH,KAAK,WACLU,OAAQ,SAAAC,GAAG,OAAIjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAoBa,OAGtDjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBADF,MAC4BgB,KAAKC,UAAUtB,EAAO,KAAM,UCzBvDuB,MAjBf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OACEmB,IAAKC,IACLlB,UAAU,WACVmB,IAAI,OACJC,MAAM,MACNC,OAAO,QAETzB,EAAAC,EAAAC,cAACwB,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OAAOhB,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.dd4f4c1f.chunk.js","sourcesContent":["import * as Yup from 'yup';\n\nexport const ValidationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Email Required'),\n  password: Yup.string().required('Password Required'),\n});\n\nexport default ValidationSchema;\n","import React from 'react';\nimport './styles.css';\n\nexport function Input({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  label,\n  ...props\n}) {\n  return (\n    <React.Fragment>\n      {label && (\n        <label className=\"Input--Label\" for={field.name}>\n          {label}\n        </label>\n      )}\n      <input className=\"Input--Field\" {...field} {...props} />\n    </React.Fragment>\n  );\n}\n\nexport default Input;\n","/**\n * LoginForm\n */\n\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport './styles.css';\nimport ValidationSchema from './ValidationSchema';\nimport Input from '../Input';\n\nfunction LoginForm() {\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={ValidationSchema}\n    >\n      {props => (\n        <Form autoCapitalize=\"off\" autoComplete=\"off\">\n          <div className=\"LoginForm--Container\">\n            <div>\n              <div className=\"LoginForm--Field\">\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  component={Input}\n                  label=\"Email Address\"\n                />\n              </div>\n              <div className=\"LoginForm--Field\">\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  component={Input}\n                  label=\"Password\"\n                />\n              </div>\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <div className=\"LoginForm--Error\">{msg}</div>}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <div className=\"LoginForm--Error\">{msg}</div>}\n              />\n            </div>\n            <div>\n              <pre>\n                <strong>props</strong> = {JSON.stringify(props, null, 2)}\n              </pre>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LoginForm from './LoginForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img\n          src={logo}\n          className=\"App-logo\"\n          alt=\"logo\"\n          width=\"200\"\n          height=\"200\"\n        />\n        <LoginForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}